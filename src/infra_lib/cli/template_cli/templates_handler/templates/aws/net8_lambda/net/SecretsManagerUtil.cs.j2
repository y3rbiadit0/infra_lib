using Amazon.SecretsManager;
using Amazon.SecretsManager.Model;

namespace {{ project_name }}
{
    public static class SecretsManagerUtil
    {
        public static Task<string> GetSecretAsync(string secretName)
        {
            return EnvironmentSettings.Instance.IsDevelopment
                ? GetSecretDevAsync(secretName)
                : GetSecretProdAsync(secretName);
        }

        private static async Task<string> GetSecretProdAsync(string secretName)
        {
            using var client = new AmazonSecretsManagerClient();
            var request = new GetSecretValueRequest { SecretId = secretName };
            var response = await client.GetSecretValueAsync(request);
            return response.SecretString ?? "<no secret>";
        }

        private static async Task<string> GetSecretDevAsync(string secretName)
        {
            var config = new AmazonSecretsManagerConfig
            {
                ServiceURL = Environment.GetEnvironmentVariable("AWS_ENDPOINT_URL"),
                UseHttp = true,
                AuthenticationRegion = Environment.GetEnvironmentVariable("AWS_DEFAULT_REGION")
            };

            using var client = new AmazonSecretsManagerClient(
                Environment.GetEnvironmentVariable("AWS_ACCESS_KEY_ID")!,
                Environment.GetEnvironmentVariable("AWS_SECRET_ACCESS_KEY")!,
                config
            );

            try
            {
                var request = new GetSecretValueRequest { SecretId = secretName };
                var response = await client.GetSecretValueAsync(request);
                return response.SecretString ?? "<no secret>";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching secret {secretName}: {ex.Message}");
                return "<error>";
            }
        }
    }
}
