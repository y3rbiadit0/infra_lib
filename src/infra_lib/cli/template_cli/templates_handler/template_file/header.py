import datetime
from abc import ABC, abstractmethod
from pathlib import Path


class HeaderGenerator(ABC):
    """Abstract base class for file header generators."""

    @abstractmethod
    def generate_header(self, target_path: Path) -> str:
        """Return the header string for the given target file."""

        pass


class DefaultHeaderGenerator(HeaderGenerator):
    """Default implementation for infra_lib autogenerated headers."""

    def __init__(
        self, generator_name: str = "infra_lib", generator_version: str = "0.0.1"
    ):
        self.generator_name = generator_name
        self.generator_version = generator_version

    def generate_header(self, target_path: Path) -> str:
        timestamp = (
            datetime.datetime.now(datetime.timezone.utc)
            .replace(microsecond=0)
            .isoformat()
        )
        header_text = f"Autogenerated by {self.generator_name} {self.generator_version} on {timestamp} UTC.\n"

        ext = target_path.suffix.lower()
        if ext in [".py", ".sh", ".bash", ".yaml", ".yml", ".toml", ".tf"]:
            return f"# {header_text}\n"
        elif ext in [".cs", ".java", ".js", ".ts", ".go"]:
            return f"// {header_text}\n"
        elif ext in [".html", ".xml"]:
            return f"<!-- {header_text} -->\n"
        else:
            return ""
